@charset "UTF-8";
* {
  margin: 0;
  padding: 0;
}

body {
  font-family: Arial, Helvetica, sans-serif;
}

/* ===== Funciones ===== */
/* ===== Nesting o anidamiento ===== */
.nav {
  background-color: steelblue;
}
.nav ul {
  color: #000;
}
.nav ul li {
  color: #221e1e;
}
.nav__container {
  width: 90%;
  margin: 0 auto;
  height: 70px;
  display: flex;
  justify-content: space-evenly;
  align-items: center;
}
.nav__item {
  color: #fff;
  text-decoration: none;
}
.nav__item--active {
  text-decoration: underline;
}
.nav__item:hover {
  color: #000;
}
@media (min-width: 764px) {
  .nav__container {
    justify-content: flex-end;
  }
}

/* Mixins */
.hero__container {
  height: calc(100vh - 70px);
  background-image: linear-gradient(rgba(0, 0, 0, 0.7098039216), rgba(0, 0, 0, 0.7254901961)), url("../img/element5-digital-OyCl7Y4y0Bk-unsplash.jpg");
  display: flex;
  justify-content: center;
  align-items: center;
  background-size: cover;
  background-position: 0 0;
  background-repeat: no-repeat;
}
.hero__texts {
  width: 90%;
  color: #37994c;
}
.hero__title {
  font-size: 2.5rem;
  margin: 0.625rem;
}
.hero__paragraph {
  font-size: 1.125rem;
}

/* ===== Varibles ===== */
/* Permiten definir un estilo que vamos a usar varias veces
así si debemos hacer un cambio, solo lo hacemos una ves*/
/* ===== Modulos ó Partials ===== */
/* Sass permite modularizar nuestro código, dividirlo en partes para hacerlo más legible y corto,
/* se hace utilizando los partials que son archivos que no son compilados directamente sino desde nuestro archivo principal,
/* los partials se nombran con la regla _namePartial.scss y luego para llamarlos en el archivo ppal,
se usa la regla up-rule @use 'namePartial'; y en ese momento serán compilados en nuestro css*/
/*@use 'animaciones'; *//*# sourceMappingURL=main.css.map */